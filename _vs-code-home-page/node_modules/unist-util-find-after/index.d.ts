export var findAfter: (<T extends import('unist').Node>(
  node: Parent,
  index: Node | number,
  test:
    | T['type']
    | Partial<T>
    | import('unist-util-is').TestFunctionPredicate<T>
    | (
        | T['type']
        | Partial<T>
        | import('unist-util-is').TestFunctionPredicate<T>
      )[]
) => T) &
  ((
    node: Parent,
    index: Node | number,
    test?:
      | null
      | undefined
      | Type
      | Props
      | TestFunctionAnything
      | Array<Type | Props | TestFunctionAnything>
  ) => Node | null)
export type Node = import('unist').Node
export type Parent = import('unist').Parent
export type Type = import('unist-util-is').Type
export type Props = import('unist-util-is').Props
export type TestFunctionAnything = import('unist-util-is').TestFunctionAnything
