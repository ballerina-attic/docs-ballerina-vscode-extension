"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findResultsState = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _server = require("react-dom/server");

var _algoliasearchHelper = _interopRequireWildcard(require("algoliasearch-helper"));

var _reactInstantsearchCore = require("react-instantsearch-core");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }

function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var hasMultipleIndices = function hasMultipleIndices(context) {
  return context && context.multiIndexContext;
};

var getIndexId = function getIndexId(context) {
  return hasMultipleIndices(context) ? context.multiIndexContext.targetedIndex : context.ais.mainTargetedIndex;
};

function createWidgetsCollector(accumulator) {
  return function (props) {
    accumulator.push(_objectSpread(_objectSpread({}, props), {}, {
      index: getIndexId(props.context)
    }));
  };
}

function getMetadata(widgets) {
  return widgets.filter(function (widget) {
    return widget.getMetadata;
  }).map(function (widget) {
    return widget.getMetadata(widget.props, widget.searchState);
  });
}

var getSearchParameters = function getSearchParameters(indexName, widgets) {
  var sharedParameters = widgets.filter(function (widget) {
    return !hasMultipleIndices(widget.context);
  }).reduce(function (acc, widget) {
    return widget.getSearchParameters(acc, widget.props, widget.searchState);
  }, new _algoliasearchHelper.default.SearchParameters(_objectSpread(_objectSpread({}, _reactInstantsearchCore.HIGHLIGHT_TAGS), {}, {
    index: indexName
  })));
  var derivedParameters = widgets.filter(function (widget) {
    return hasMultipleIndices(widget.context);
  }).reduce(function (acc, widget) {
    var indexId = getIndexId(widget.context);
    return _objectSpread(_objectSpread({}, acc), {}, (0, _defineProperty2.default)({}, indexId, widget.getSearchParameters(acc[indexId] || sharedParameters, widget.props, widget.searchState)));
  }, {});
  return {
    sharedParameters: sharedParameters,
    derivedParameters: derivedParameters
  };
};
/**
 * The engine can return params: "query=xxx&query=yyy" if e.g. a query rule modifies it.
 * This however will cause us to miss the cache hydration, so we make sure to keep
 * only the first query (always the one from the parameters).
 */


function removeDuplicateQuery(params) {
  if (!params) {
    return params;
  }

  var hasFoundQuery = false;
  var queryParamRegex = /&?query=[^&]*/g;
  return params.replace(queryParamRegex, function replacer(match) {
    if (hasFoundQuery) {
      return '';
    }

    hasFoundQuery = true;
    return match;
  });
}

function cleanRawResults(rawResults) {
  return rawResults.map(function (res) {
    return _objectSpread(_objectSpread({}, res), {}, {
      params: removeDuplicateQuery(res.params)
    });
  });
}

var singleIndexSearch = function singleIndexSearch(helper, parameters) {
  return helper.searchOnce(parameters).then(function (res) {
    return {
      rawResults: cleanRawResults(res.content._rawResults),
      state: res.content._state
    };
  });
};

var multiIndexSearch = function multiIndexSearch(indexName, client, sharedParameters, _ref) {
  var mainParameters = _ref[indexName],
      derivedParameters = (0, _objectWithoutProperties2.default)(_ref, [indexName].map(_toPropertyKey));
  var helper = (0, _algoliasearchHelper.default)(client, indexName);
  var indexIds = Object.keys(derivedParameters);
  var searches = [new _algoliasearchHelper.SearchParameters(_objectSpread(_objectSpread({}, sharedParameters), mainParameters))].concat((0, _toConsumableArray2.default)(indexIds.map(function (indexId) {
    return derivedParameters[indexId];
  }))).map(function (params) {
    return new Promise(function (resolve) {
      return helper.derive(function () {
        return params;
      }).once('result', resolve);
    });
  });
  helper.searchOnlyWithDerivedHelpers(); // We attach `indexId` on the results to be able to reconstruct the object
  // on the client side. We cannot rely on `state.index` anymore because we
  // may have multiple times the same index.

  return Promise.all(searches).then(function (results) {
    return [indexName].concat((0, _toConsumableArray2.default)(indexIds)).map(function (indexId, i) {
      return {
        rawResults: cleanRawResults(results[i].results._rawResults),
        state: results[i].results._state,
        _internalIndexId: indexId
      };
    });
  });
};

var findResultsState = function findResultsState(App, props) {
  if (!props) {
    throw new Error('The function `findResultsState` must be called with props: `findResultsState(App, props)`');
  }

  if (!props.searchClient) {
    throw new Error('The props provided to `findResultsState` must have a `searchClient`');
  }

  if (!props.indexName) {
    throw new Error('The props provided to `findResultsState` must have an `indexName`');
  }

  var widgets = []; // eslint-disable-next-line no-shadow

  function execute(props) {
    widgets = [];
    (0, _server.renderToString)( /*#__PURE__*/_react.default.createElement(App, (0, _extends2.default)({}, props, {
      widgetsCollector: createWidgetsCollector(widgets)
    })));

    if (widgets.length === 0) {
      throw new Error('[ssr]: no widgets were added, you likely did not pass the `widgetsCollector` down to the InstantSearch component.');
    }

    var _getSearchParameters = getSearchParameters(props.indexName, widgets),
        sharedParameters = _getSearchParameters.sharedParameters,
        derivedParameters = _getSearchParameters.derivedParameters;

    var metadata = getMetadata(widgets);
    var helper = (0, _algoliasearchHelper.default)(props.searchClient, sharedParameters.index);

    if (typeof props.searchClient.addAlgoliaAgent === 'function') {
      props.searchClient.addAlgoliaAgent("react-instantsearch-server (".concat(_reactInstantsearchCore.version, ")"));
    }

    if (Object.keys(derivedParameters).length === 0) {
      return singleIndexSearch(helper, sharedParameters).then(function (res) {
        return _objectSpread({
          metadata: metadata
        }, res);
      });
    }

    return multiIndexSearch(props.indexName, props.searchClient, sharedParameters, derivedParameters).then(function (results) {
      return {
        metadata: metadata,
        results: results
      };
    });
  }

  return execute(props).then(function (resultsState) {
    // <DynamicWidgets> requires another query to retrieve the dynamic widgets
    // to render.
    if (widgets.some(function (widget) {
      return widget.displayName === 'AlgoliaDynamicWidgets';
    })) {
      return execute(_objectSpread(_objectSpread({}, props), {}, {
        resultsState: resultsState
      }));
    }

    return resultsState;
  });
};

exports.findResultsState = findResultsState;