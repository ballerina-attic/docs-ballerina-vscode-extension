export type UnistNode = import('unist').Node
export type MdastRoot = import('mdast').Root
export type MdastNode = import('mdast').Content
export type MdastParent = import('mdast').Parent
export type MdastListContent = import('mdast').ListContent
export type MdastPhrasingContent = import('mdast').PhrasingContent
export type MdastDefinitionContent = import('mdast').DefinitionContent
export type MdastBlockContent = import('mdast').BlockContent
export type MdastTableContent = import('mdast').TableContent
export type MdastRowContent = import('mdast').RowContent
export type Parent = import('hast').Parent
export type Root = import('hast').Root
export type Element = import('hast').Element
export type Text = import('hast').Text
export type Comment = import('hast').Comment
export type ElementChild = Element['children'][number]
export type Child = Parent['children'][number]
export type Node = Child | Root
export type Handle = (
  h: H,
  node: any,
  parent?: import('hast').Parent | undefined
) => MdastNode | Array<MdastNode> | void
export type Properties = Record<string, unknown>
export type Options = {
  handlers?:
    | {
        [x: string]: Handle
      }
    | undefined
  document?: boolean | undefined
  newlines?: boolean | undefined
  checked?: string | undefined
  unchecked?: string | undefined
  quotes?: string[] | undefined
}
export type Context = {
  nodeById: {
    [x: string]: Element
  }
  baseFound: boolean
  frozenBaseUrl: string | null
  wrapText: boolean
  inTable: boolean
  qNesting: number
  handlers: {
    [x: string]: Handle
  }
  document: boolean | undefined
  checked: string
  unchecked: string
  quotes: Array<string>
}
export type HWithProps = (
  node: Node,
  type: string,
  props?: Properties | undefined,
  children?: string | import('mdast').Content[] | undefined
) => MdastNode
export type HWithoutProps = (
  node: Node,
  type: string,
  children?: string | import('mdast').Content[] | undefined
) => MdastNode
export type H = HWithProps & HWithoutProps & Context
