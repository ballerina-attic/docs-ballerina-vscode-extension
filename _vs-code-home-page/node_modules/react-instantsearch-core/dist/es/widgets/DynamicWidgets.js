import _typeof from "@babel/runtime/helpers/esm/typeof";
import React, { Fragment } from 'react';
import { getDisplayName } from "../core/utils.js";
import connectDynamicWidgets from "../connectors/connectDynamicWidgets.js";

function getAttribute(component) {
  if (_typeof(component) !== 'object') {
    return undefined;
  }

  if (component.props.attribute) {
    return component.props.attribute;
  }

  if (Array.isArray(component.props.attributes)) {
    return component.props.attributes[0];
  }

  if (component.props.children) {
    return getAttribute(React.Children.only(component.props.children));
  }

  return undefined;
}

function DynamicWidgets(_ref) {
  var children = _ref.children,
      attributesToRender = _ref.attributesToRender,
      _ref$fallbackComponen = _ref.fallbackComponent,
      Fallback = _ref$fallbackComponen === void 0 ? function () {
    return null;
  } : _ref$fallbackComponen;
  var widgets = new Map();
  React.Children.forEach(children, function (child) {
    var attribute = getAttribute(child);

    if (!attribute) {
      throw new Error("Could not find \"attribute\" prop for ".concat(getDisplayName(child), "."));
    }

    widgets.set(attribute, child);
  }); // on initial render this will be empty, but React InstantSearch keeps
  // search state for unmounted components in place, so routing works.

  return /*#__PURE__*/React.createElement(React.Fragment, null, attributesToRender.map(function (attribute) {
    return /*#__PURE__*/React.createElement(Fragment, {
      key: attribute
    }, widgets.get(attribute) || /*#__PURE__*/React.createElement(Fallback, {
      attribute: attribute
    }));
  }));
}

export default connectDynamicWidgets(DynamicWidgets, {
  $$widgetType: 'ais.dynamicWidgets'
});