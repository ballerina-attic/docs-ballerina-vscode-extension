"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _reactFastCompare = _interopRequireDefault(require("react-fast-compare"));

var _createConnector = _interopRequireDefault(require("../core/createConnector"));

var _indexUtils = require("../core/indexUtils");

var _utils = require("../core/utils");

var _excluded = ["page"];

function getId() {
  return 'page';
}

function getCurrentRefinement(props, searchState, context) {
  var id = getId();
  var page = 1;
  var currentRefinement = (0, _indexUtils.getCurrentRefinementValue)(props, searchState, context, id, page);

  if (typeof currentRefinement === 'string') {
    return parseInt(currentRefinement, 10);
  }

  return currentRefinement;
}

function getStateWithoutPage(state) {
  var _ref = state || {},
      page = _ref.page,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  return rest;
}

function getInMemoryCache() {
  var cachedHits = undefined;
  var cachedState = undefined;
  return {
    read: function read(_ref2) {
      var state = _ref2.state;
      return (0, _reactFastCompare.default)(cachedState, getStateWithoutPage(state)) ? cachedHits : null;
    },
    write: function write(_ref3) {
      var state = _ref3.state,
          hits = _ref3.hits;
      cachedState = getStateWithoutPage(state);
      cachedHits = hits;
    }
  };
}

function extractHitsFromCachedHits(cachedHits) {
  return Object.keys(cachedHits).map(Number).sort(function (a, b) {
    return a - b;
  }).reduce(function (acc, page) {
    return acc.concat(cachedHits[page]);
  }, []);
}
/**
 * InfiniteHits connector provides the logic to create connected
 * components that will render an continuous list of results retrieved from
 * Algolia. This connector provides a function to load more results.
 * @name connectInfiniteHits
 * @kind connector
 * @providedPropType {array.<object>} hits - the records that matched the search state
 * @providedPropType {boolean} hasMore - indicates if there are more pages to load
 * @providedPropType {function} refine - call to load more results
 */


var _default = (0, _createConnector.default)({
  displayName: 'AlgoliaInfiniteHits',
  $$type: 'ais.infiniteHits',
  getProvidedProps: function getProvidedProps(props, searchState, searchResults) {
    var _this = this;

    var results = (0, _indexUtils.getResults)(searchResults, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });

    if (!results) {
      return {
        hits: [],
        hasPrevious: false,
        hasMore: false,
        refine: function refine() {},
        refinePrevious: function refinePrevious() {},
        refineNext: function refineNext() {}
      };
    }

    var page = results.page,
        hits = results.hits,
        hitsPerPage = results.hitsPerPage,
        nbPages = results.nbPages,
        state = results._state;
    this._cache = props.cache ? props.cache : this._cache || getInMemoryCache();
    var cachedHits = this._cache.read({
      state: state
    }) || {};
    var hitsWithPositions = (0, _utils.addAbsolutePositions)(hits, hitsPerPage, page);
    var hitsWithPositionsAndQueryID = (0, _utils.addQueryID)(hitsWithPositions, results.queryID);
    cachedHits[page] = hitsWithPositionsAndQueryID;

    this._cache.write({
      state: state,
      hits: cachedHits
    });
    /*
      Math.min() and Math.max() returns Infinity or -Infinity when no argument is given.
      But there is always something in this point because of `cachedHits[page]`.
    */


    var firstReceivedPage = Math.min.apply(Math, (0, _toConsumableArray2.default)(Object.keys(cachedHits).map(Number)));
    var lastReceivedPage = Math.max.apply(Math, (0, _toConsumableArray2.default)(Object.keys(cachedHits).map(Number)));
    var hasPrevious = firstReceivedPage > 0;
    var lastPageIndex = nbPages - 1;
    var hasMore = lastReceivedPage < lastPageIndex;

    var refinePrevious = function refinePrevious(event) {
      return _this.refine(event, firstReceivedPage - 1);
    };

    var refineNext = function refineNext(event) {
      return _this.refine(event, lastReceivedPage + 1);
    };

    return {
      hits: extractHitsFromCachedHits(cachedHits),
      hasPrevious: hasPrevious,
      hasMore: hasMore,
      refinePrevious: refinePrevious,
      refineNext: refineNext
    };
  },
  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {
    return searchParameters.setQueryParameters({
      page: getCurrentRefinement(props, searchState, {
        ais: props.contextValue,
        multiIndexContext: props.indexContextValue
      }) - 1
    });
  },
  refine: function refine(props, searchState, event, index) {
    var id = getId();
    var nextValue = (0, _defineProperty2.default)({}, id, index + 1);
    var resetPage = false;
    return (0, _indexUtils.refineValue)(searchState, nextValue, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    }, resetPage);
  }
});

exports.default = _default;