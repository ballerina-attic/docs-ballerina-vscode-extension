{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Ballerina Extension for Visual Studio Code","text":"<p>The Visual Studio Code Ballerina extension provides a set of rich language features along with an enhanced user experience. It offers easy development, execution, debugging, and testing for the Ballerina programming language. The Ballerina language possesses a bidirectional mapping between its syntaxes and the visual representation. You can visualize the graphical representation of your Ballerina source further via the extension.</p> <p>For instructions on installing the Ballerina VS Code extension, see Get started.</p>"},{"location":"configurations/","title":"Configurations","text":"<p>The extension offers a number of settings. These can be configured by modifying your user or workspace settings or by modifying the <code>settings.json</code> file of VS Code.</p>"},{"location":"configurations/#basic-configurations","title":"Basic configurations","text":"<p>These configurations are the basic ones, which are used by the extension users.</p>    ID Description     ballerina.codeLens.all.enabled Enable code lenses that appear in the editor view.   ballerina.enableConfigurableEditor Enable the configurable editor. This will open a  form to set values for configurable variables in the code when you run the Ballerina code.   ballerina.enableNotebookDebug Enable the debug feature in Ballerina notebook files (<code>.balnotebook</code>).   ballerina.enablePerformanceForecast Enable the performance forecaster. This will show you the forecasted latency and other performance values for Ballerina services in the low-code diagram.   ballerina.enableSemanticHighlighting Enable semantic code highlighting.   ballerina.enableTelemetry Enable telemetry logging. This will send log data to the extension developers. This will help developers to improve the extension.   ballerina.experimental Enable the experimental features of the Ballerin VS Code extension.   ballerina.home Set the Ballerina installation location. <code>ballerina.pluginDevMode</code> must be enabled to use this.   ballerina.lowCodeMode Enable the Ballerina low-code mode. This will open the Diagram View by default for Ballerina codes. This will focus the Diagram View explorer in the side menu when VS Code opens.   ballerina.pluginDevMode Enable the developer mode."},{"location":"configurations/#advanced-configurations","title":"Advanced configurations","text":"<p>These configurations are related to the extension development process and not useful for the extension users.</p>    ID Description     ballerina.enableLanguageServerDebug Enable language server debugging.   ballerina.debugLog Enable the debug logs of the extension. This will print the extension debug logs to the Ballerina output channel in the VS Code output window."},{"location":"debug/","title":"Debug Ballerina programs","text":"<p>When writing large-scale applications with complex logic, you may encounter syntax, semantic, or runtime issues in your code. The Ballerina compiler comes in handy when detecting syntax and semantic issues. However, it is impossible for a compiler to detect runtime errors like logical errors because they occur during the program execution after a successful compilation. This is where the dedicated debugging tooling support becomes important.</p> <p>Currently, a feature-rich debugging experience for troubleshooting Ballerina applications is provided via the Ballerina Visual Studio Code extension.</p>"},{"location":"debug/#debug-using-codelens","title":"Debug using CodeLens","text":"<p>The Ballerina extension provides multiple options to debug Ballerina applications and the most convenient way will be using the context-aware debug CodeLens support.</p> <p>However, if you require launching debug sessions with additional configurations (i.e., program arguments, environment variables), you can use the <code>launch.json</code> configurations.</p>  <p>Info: For more information, see Start a debug session with configurations).</p>"},{"location":"debug/#program-debug-sessions","title":"Program debug sessions","text":"<p>Follow the steps below to start a quick debug session using CodeLens.</p> <ol> <li> <p>Open the folder, which includes the Ballerina program you want to debug and open the source file in the editor.</p> </li> <li> <p>Add the debug points you require by clicking in front of the line numbers of the file you want to debug.</p> </li> <li> <p>Click the <code>Debug</code> CodeLens, which will appear just above the <code>main()</code> method.</p> </li> </ol>"},{"location":"debug/#test-debug-sessions","title":"Test debug sessions","text":"<p>The Ballerina test functions can also be debugged using CodeLens. The <code>debug</code> CodeLens will automatically appear on top of each Ballerina test function and you are able to execute/debug only the selected test case by clicking on the corresponding CodeLens as shown below.</p>"},{"location":"debug/#debug-using-configurations","title":"Debug using configurations","text":"<p>Follow the steps below to start a debug session with configurations. All the configurations need to be added in the <code>launch.json</code> file.</p> <ol> <li> <p>Open the folder, which includes the Ballerina program you want to debug and select the file.</p> </li> <li> <p>Press the Control + Shift + D keys (for Mac: Command + Shift +D) to launch the Debugger view.</p> </li> <li> <p>Click create a launch.json file and then select Ballerina Debug as the Environment. </p> <p>You will see the opened <code>launch.json</code> file.</p> </li> <li> <p>Add/edit the relevant configurations for debugging in the <code>launch.json</code> file.</p> </li> <li> <p>Add the debug points you require by clicking in front of the line numbers of the file you want to debug.</p> </li> <li> <p>Start a program, test, or remote debug session as shown below.</p> </li> </ol>  <p>Info: If you launch the debug session through VS Code, the working directory will be the Ballerina package root. However, you can use remote debugging for alternative working directories.</p>"},{"location":"debug/#program-debug-sessions_1","title":"Program debug sessions","text":"<p>Follow the steps below to start a program debug session.</p> <ol> <li> <p>Select Ballerina Debug from the drop-down available in the upper left corner to start a program debugging session.</p> </li> <li> <p>Click the Start Debugging icon on the upper left corner to start debugging.</p> </li> </ol> <p>You will see the output in the DEBUG CONSOLE.</p>"},{"location":"debug/#test-debug-sessions_1","title":"Test debug sessions","text":"<p>Follow the steps below to start a test debug session.</p> <ol> <li> <p>Select Ballerina Test from the drop-down menu available in the upper-left corner to start a test debugging session.</p> </li> <li> <p>Click the Start Debugging icon in the upper-left corner to start debugging.</p> </li> </ol> <p>You will see the output in the DEBUG CONSOLE as shown below.</p>"},{"location":"debug/#remote-debug-sessions","title":"Remote debug sessions","text":"<p>Follow the steps below to start a remote debug session.</p> <ol> <li> <p>Create the <code>launch.json</code> configuration file if it is not created already. For instructions on creating the <code>launch.json</code> file, see Start a debug session with configurations.</p> </li> <li> <p>Open the <code>launch.json</code> file and configure the <code>debuggeeHost</code> and <code>debuggeePort</code> attributes under the <code>Ballerina Remote</code> configurations section accordingly.</p> </li> <li> <p>After setting the remote debug configurations, select Ballerina Remote from the drop-down available in the upper left corner to start a remote debugging session.</p> </li> <li> <p>Open a terminal and execute the debug command that is relevant to your requirement from the ones below:</p>    Code action Description     Debugging a Ballerina package or a single file <code>bal run --debug &lt;DEBUGGEE_PORT&gt; &lt;BAL_FILE_PATH/PACKAGE_PATH&gt;</code>   Debugging a Ballerina executable JAR <code>bal run --debug &lt;DEBUGGEE_PORT&gt; &lt;EXECUTABLE_JAR_FILE_PATH&gt;</code>   Debugging Ballerina tests <code>bal test --debug &lt;DEBUGGEE_PORT&gt; &lt;PACKAGE_PATH&gt;</code>    <p>The terminal will show the following log:</p> <p><code>Listening for transport dt_socket at address: 5005</code></p> </li> <li> <p>Click the Start Debugging icon on the upper-left corner to start debugging.</p> <p>You will see the output in the DEBUG CONSOLE as shown below.</p>  </li> </ol>"},{"location":"debug/#use-debug-configurations","title":"Use debug configurations","text":"<p>The Ballerina debugger supports various debug configuration options via the <code>launch.json</code> file.</p>  <p>Info: You can either add the configurations to the existing <code>launch.json</code> file, which is located in your workspace root under the <code>.vscode</code> directory or follow the steps below to generate the <code>launch.json</code> configurations file with the default values.</p>  <ol> <li> <p>Click the Run and Debug icon in the left menu or press the Control + Shift + D keys to launch the Debugger view (for Mac - Command + Shift +D).</p> </li> <li> <p>Click create a launch.json file and select Ballerina Debug.</p>   </li> </ol> <p>Given below are the default configurations generated for debugging Ballerina:</p> <pre><code>  ![Debug Configurations](../img/debug/debug-configurations.png)\n</code></pre>"},{"location":"debug/#ballerina-launchjson-attributes","title":"Ballerina <code>launch.json</code> attributes","text":"<p>The auto-generated <code>launch.json</code> file consists of three main configurations named <code>Ballerina Debug</code>, <code>Ballerina Test</code>, and <code>Ballerina Remote</code>.</p> <p>Each configuration supports a different set of attributes, which will be provided via IntelliSense completion suggestions.</p> <p>The following attributes are mandatory for all configurations.</p>    Attribute Description     <code>name</code> The reader-friendly name to appear in the Debug launch configuration drop-down menu.   <code>type</code> The type of debugger to use for this launch configuration. The attribute value must be kept as <code>ballerina</code> for all Ballerina debugging configuration types.   <code>request</code> The request type of this launch configuration. Currently, <code>launch</code> and <code>attach</code> are supported.    <p>The following attributes are supported for all Ballerina <code>launch</code> configurations.</p>    Attribute Description     <code>programArgs</code> Any program arguments that are required to be passed into the <code>main</code> function of the Ballerina program to be launched can be passed as a list of strings.   <code>commandOptions</code> If required, you can configure command options for the Ballerina program to be launched as a list of strings. You can see the list of all the available command options by executing the following CLI commands in your terminal.  - For the <code>Ballerina Debug</code> configuration: <code>bal run --help</code>  - For the <code>Ballerina test</code> configuration: <code>bal test --help</code>   <code>env</code> Any environment variables you need to configure for launching the Ballerina program can be passed as a map of strings (name and value).   <code>debugTests</code> Indicates whether to debug the tests for the given script.    <p>The following attributes are supported for all Ballerina <code>attach</code> configurations.</p>    Attribute Description     <code>debuggeeHost</code> Host address of the remote process to be attached (if not specified, the default value will be the localhost(<code>127.0.0.1</code>)).   <code>debuggeePort</code> Port number of the remote process to be attached."},{"location":"debug/#use-the-debugging-features","title":"Use the debugging features","text":"<p>The following debugging features are currently supported by the Ballerina VScode extension.</p>"},{"location":"debug/#conditional-breakpoints","title":"Conditional breakpoints","text":"<p>The Ballerina debugger provides the ability of setting Ballerina expression-based conditions for regular breakpoints. The debugger will suspend at the breakpoint whenever the expression evaluates to true.</p>"},{"location":"debug/#logpoints","title":"Logpoints","text":"<p>Logpoints are another variant of breakpoints, which do not \"break\" the program execution and instead, log a message to the console. Logpoints are especially useful for injecting logging while debugging production servers that cannot be paused or stopped.</p> <p>Logpoints can also be enabled/disabled and can be controlled by conditions similar to regular breakpoints.</p>  <p>Log messages can either be plain texts or string templates, which can contain expressions to be evaluated within the <code>${}</code> syntax.</p>"},{"location":"debug/#pause-and-continue","title":"Pause and continue","text":"<p>Any running Ballerina programs can be suspended immediately at the current execution line of the program using the <code>pause</code> command in VS Code as shown below. With this feature, you are able to suspend (and resume) the remote VM resulting in a debug hit at the current execution line of the program.</p>  <p>This feature will be useful in contexts where the program seems to be hanged due to blocking operations/infinite loops and when you want to know the exact line that the program is waiting on.</p>"},{"location":"debug/#expression-evaluation","title":"Expression evaluation","text":"<p>Ballerina expression evaluator allows evaluating Ballerina variables and expressions at runtime by allowing them to be viewed when the IDE is in the break mode.</p> <p>The Ballerina VSCode debugger lets you evaluate expressions in the ways below.</p>"},{"location":"debug/#use-the-debug-console","title":"Use the debug console","text":""},{"location":"debug/#use-the-watch-window","title":"Use the watch window","text":"<p>Info: For more information on the VS Code debugging features, go to VS Code documentation.</p>"},{"location":"license/","title":"Ballerina VS Code extension license","text":"<p>WSO2 grants you a worldwide, non-exclusive right to copy and use the Ballerina Visual Studio Code extension in  accordance with its license terms.</p> <p>For the license terms, see the Ballerina VS Code extension license terms.</p>"},{"location":"test/","title":"Test the program","text":""},{"location":"build-and-run/build-and-run/","title":"Build and run the program","text":"<p>Follow the steps below to create a sample Ballerina program in VS Code. </p>"},{"location":"build-and-run/build-and-run/#use-the-code-view","title":"Use the code view","text":"<p>Note: Skip the steps 1-3, if you already have a Ballerina code.</p>  <ol> <li> <p>Click View in the menu bar of the editor, and click Command Palette.</p>  <p>Tip: You can use the shortcut methods <code>\u2318 + \u2191 + P</code> on macOS and <code>Ctrl + Shift + P</code> on Windows and Linux.</p>  </li> <li> <p>In the search bar, type <code>Show Examples</code>, and click Ballerina: Show Examples.</p> </li> <li> <p>Select the Hello World Main example.</p> </li> <li> <p>Run the program.</p> <ul> <li> <p>Option 1</p> <p>Click on the Run CodeLens on the editor. </p>  </li> <li> <p>Option 2</p> <p>Click Run on the title bar of the editor.</p>  </li> </ul> </li> </ol>"},{"location":"build-and-run/build-and-run/#use-the-diagram-view","title":"Use the diagram view","text":"<ol> <li> <p>View the diagram:</p> <ul> <li> <p>Option 1</p> <p>Click Show Diagram on the title bar of the editor to view the graphical representation of the program.</p>  </li> <li> <p>Option 2</p> <p>Click the Ballerina icon in the VS Code side menu to open the diagram explorer tree.</p>  </li> </ul> </li> <li> <p>Run the program:</p> <ul> <li> <p>Option 1</p> <p>Click Run in the diagram options menu.</p>  </li> <li> <p>Option 2</p> <p>Click Run on the title bar of the editor.</p>  </li> </ul> </li> </ol> <p>The integrated terminal will open automatically and run the program.</p>  <p>You just ran your first Ballerina program.</p>  <p>Tip: If you wish to debug further, use either Debug or see the debugging guidelines. </p>"},{"location":"build-and-run/build-and-run/#next-steps-try-it","title":"Next steps - Try it","text":"<p>The Ballerina VS Code extension allows you to try out and debug HTTP/GraphQL services (without using any third-party tools) while you develop them. </p> <ul> <li>Swagger (HTTP) tool</li> <li>GraphQL tool</li> </ul>"},{"location":"build-and-run/build-jar-file/","title":"Build the executable JAR file","text":"<p>Follow the steps below to create an executable JAR file to deploy. </p> <ol> <li>Click View in the menu bar of the editor, and click Command Palette.</li> </ol>  <p>Tip: You can use the shortcut methods <code>\u2318 + \u2191 + P</code> on macOS and <code>Ctrl + Shift + P</code> on Windows and Linux.</p>  <ol> <li>In the search bar, type <code>Build</code>, and click Ballerina: Build.</li> </ol> <p>The integrated terminal will open automatically and run the build command.</p>  <p>Info: The JAR file can be found in the <code>/target/bin/</code> directory.</p>"},{"location":"build-and-run/tryit-tools/graphql-tool/","title":"Try GraphQL services with Ballerina","text":"<p>GraphQL is an open-source data querying and manipulation language for APIs. While you develop a GraphQL service, you need to try it and debug it to check how it works. The Ballerina VS Code extension provides the GraphQL Try it view, which gives the ability to try GraphQL services within VS Code instead of using any third-party software.</p>"},{"location":"build-and-run/tryit-tools/graphql-tool/#write-the-graphql-service","title":"Write the GraphQL service","text":"<p>Add the code below to the <code>main.bal</code> file.</p> <pre><code>import ballerina/graphql;\n\n# A service representing a network-accessible GraphQL API.\nservice / on new graphql:Listener(8090) {\n\n    # A resource for generating greetings.\n    # + name - the input string name\n    # + return - string name with greeting message or error\n    resource function get greeting(string name) returns string|error {\n        // Send a response back to the caller.\n        if name is \"\" {\n            return error(\"name should not be empty!\");\n        }\n        return \"Hello, \" + name;\n    }\n}\n\n</code></pre>"},{"location":"build-and-run/tryit-tools/graphql-tool/#try-the-graphql-service","title":"Try the GraphQL service","text":"<p>Once you add the above function, the VS Code extension will display a CodeLens called Try it on top of the service.</p> <ol> <li> <p>Click the Run CodeLens to run the program. </p>  <p>Info: This opens the terminal and starts running the service.</p>  </li> <li> <p>Click the Try it CodeLens to open the GraphQL Try it view.</p>  <p>Note: The service must be in the running state to use GraphQL Try it view.</p>   </li> <li> <p>Once the GraphQL view is opened, click Explorer to open the Explorer view.</p>  <p>Tip: You can find the available APIs from the side menu that opens.</p>  </li> <li> <p>Select the APIs that you want to try from the Explorer menu.</p>  <p>Info: This will automatically generate the payload in the editor. You can edit the payload and add the required parameters (e.g., type your name under the name parameter). Prettify will format the code for you.</p>  </li> <li> <p>Click Run to send the request.</p> <p>The response is displayed in the right-side window.</p>  </li> </ol>"},{"location":"build-and-run/tryit-tools/swagger-tool/","title":"Try HTTP services in Swagger view with Ballerina","text":"<p>While you develop an HTTP service, you need to try it and debug it to check how it works. The Ballerina VS Code extension provides the Swagger Try it view, which gives the ability to try HTTP services within VS Code instead of using any third-party software.</p>"},{"location":"build-and-run/tryit-tools/swagger-tool/#write-the-http-service","title":"Write the HTTP service","text":"<p>Add the code below to the <code>main.bal</code> file.</p> <pre><code>import ballerina/http;\n\nservice / on new http:Listener(9090) {\n\n    // This function responds with the `string` value `Hello, World!` to HTTP GET requests.\n    resource function get greeting() returns string {\n        return \"Hello, World!\";\n    }\n}    \n</code></pre>"},{"location":"build-and-run/tryit-tools/swagger-tool/#try-the-http-service","title":"Try the HTTP service","text":"<p>Once you add the above function, the VS Code extension will display a CodeLens called Try it on top of the service.</p> <ol> <li> <p>Click the Run CodeLens to run the program. </p>  <p>Info: This opens the terminal and starts running the service.</p>  </li> <li> <p>Click the Try it CodeLens to open the Swagger Try it view.</p>  <p>Note: The service must be in the running state to use Try it view.</p>   <p>You can open the swagger view in the Diagram view by clicking Try it under the Options menu.</p>  </li> <li> <p>Once the Swagger view is opened, click Try it out.</p>   <p>Tip: You can find all available APIs from the opened side menu.</p>  </li> <li> <p>Click Execute to see the response.</p>   <p>Info: If the HTTP service requires any data/parameters, they will be shown in the Parameters section. </p>  </li> </ol>"},{"location":"edit-the-code/code-actions/","title":"Code actions","text":"<p>Code actions is a feature in the VS Code Editor that enables quick fixes and code refactoring suggestions. The Ballerina VS Code extension enables the following code actions.</p>"},{"location":"edit-the-code/code-actions/#quick-fixes","title":"Quick fixes","text":"<p>Quick fixes are suggested based on the diagnostics displayed at a given cursor position. The Ballerina VS Code extension provides a wide range of quick fixes to such diagnostics.</p>"},{"location":"edit-the-code/code-actions/#variable-assignment","title":"Variable assignment","text":"<p>The following code actions are available as quick fixes when the <code>Variable assignment required</code> diagnostic is identified in your code.</p>    Code action Description     <code>Create variable</code> Create a variable for an expression.   <code>Create variable and type guard</code> Create a type guard to handle the error gracefully.   <code>Create variable and check error</code> Add a check expression.   <code>Ignore return value</code> Ignore the return value of a function call or a method call with <code>_</code>."},{"location":"edit-the-code/code-actions/#type-inference","title":"Type inference","text":"<p>The following quick fixes are available for type inference.</p>    Code action Description     <code>Create variable with type</code> Create a variable for a remote method expression in which the <code>Cannot infer the 'typedesc' argument for parameter</code> diagnostic is present."},{"location":"edit-the-code/code-actions/#missing-check-expressions","title":"Missing check expressions","text":"<p>The following quick fixes are available for missing check expressions.</p>    Code action Description     <code>Add 'check' error</code> Add the <code>check</code> keyword when the selected expression's type is a subtype of <code>error</code> or a union with an <code>error</code> member while the expected type doesn't contain an <code>error</code>."},{"location":"edit-the-code/code-actions/#check-expressions","title":"Check expressions","text":"<p>The following quick fixes are available for check expressions.</p>    Code action Description     <code>Surround with do/on-fail</code> Surround a check expression with a do/on-fail clause.   <code>Change return type to 'error?'</code> Change the return type of a function/method to <code>error?</code>."},{"location":"edit-the-code/code-actions/#imports","title":"Imports","text":"<p>The following quick fixes are available for imports.</p>    Code action Description     <code>Import module</code> Add the import statement for a module that has a reference without an import statement.   <code>Pull unresolved module</code> Pull one or more Ballerina packages (which are imported in the source and are unavailable locally) from Ballerina central.   <code>Remove import</code> Remove an unused or re-declared module import.   <code>Remove all unused imports</code> Remove all unused imports except when there is a re-declared import statement."},{"location":"edit-the-code/code-actions/#documentation","title":"Documentation","text":"<p>The following quick fixes are available for documentation.</p>    Code action Description     <code>Document this</code> Add the documentation to the closest node that can be documented clause.   <code>Update documentation</code> Update the existing documentation when parameters are missing or not documented. This depends on the warning diagnostics issued by the compiler."},{"location":"edit-the-code/code-actions/#incompatible-types","title":"Incompatible types","text":"<p>The following quick fixes are available for incompatible types.</p>    Code action Description     <code>Change variable type</code> Change the type of variable.   <code>Add type cast</code> Add a type cast for the incompatible type.   <code>Change return type</code> Change the incompatible return type of a function/method.   <code>Change parameter type</code> Add a conditional default value for the incompatible type.   <code>Add conditional default value</code> Ignore the return value of a function call or a method call with <code>_</code>.   <code>Convert to 'xml'/'string' template</code> Convert a raw template into a subtype (<code>xml</code> or <code>string</code>).   <code>Add type cast for numeric expressions</code> Add a type cast for an unsupported numeric expression.    <p>The <code>Change variable type</code>, <code>Change parameter type</code>, <code>Add type cast</code>, and <code>Change return type</code> quick fixes are demonstrated below.</p>  <p>The <code>Add conditional default value</code> and <code>Convert to 'xml'/'string' template</code> quick fixes are demonstrated below.</p>"},{"location":"edit-the-code/code-actions/#functions","title":"Functions","text":"<p>The following quick fixes are available for creating functions.</p>    Code action Description     <code>Create function</code> Create a function when there's an undefined function invoked by a function call expression.   <code>Implement method</code> Implement an unimplemented method declared by an included object type.   <code>Implement all</code> Implement all the methods declared by an included object type.   <code>Add explicit return statement</code> Add an explicit return statement to a function.   <code>Convert to public function</code> Add a <code>public</code> access modifier to a function definition.   <code>Add isolated qualifier</code> Add an isolated qualifier to a function.    <p>The <code>Create function</code>, <code>Implement method</code>, and <code>Implement all</code> quick fixes are demonstrated below.</p>  <p>The <code>Add explicit return statement</code>, <code>Convert to public function</code>, and <code>Add isolated qualifier</code> quick fixes are demonstrated below.</p>"},{"location":"edit-the-code/code-actions/#records","title":"Records","text":"<p>The following quick fixes are available for records.</p>    Code action Description     <code>Create record</code> Create a record for an unknown type clause.   <code>Fill record fields</code> Add missing record fields to a mapping constructor expression."},{"location":"edit-the-code/code-actions/#annotations","title":"Annotations","text":"<p>The following quick fixes are available for annotations.</p>    Code action Description     <code>Convert to constant</code> Convert an annotation declaration to a constant annotation declaration clause."},{"location":"edit-the-code/code-actions/#other-quick-fixes","title":"Other quick fixes","text":"Code action Description     <code>Convert to readonly clone</code> Convert an <code>e</code> expression to <code>e.cloneReadOnly()</code>.   <code>Ignore unused variable</code> Ignore an unused variable.   <code>Make construct pubic</code> Make a construct public where the <code>attempt to expose non-public symbol</code> warning is present.   <code>Convert module variable to listener declaration</code> Convert a module var declaration statement to a listener declaration.   <code>Remove unreachable code</code> Remove unreachable statements.    <p>The <code>Convert to readonly clone</code>, <code>Ignore unused variable</code>, and <code>Remove unreachable code</code> quick fixes are demonstrated below.</p>  <p>The <code>Make construct pubic</code> quick fix is demonstrated below.</p>  <p>The <code>Convert module variable to listener declaration</code> quick fix is demonstrated below.</p>"},{"location":"edit-the-code/code-actions/#refactoring-actions","title":"Refactoring actions","text":"<p>Refactoring actions are suggested when the existing code can be rearranged or restructured to improve the quality and maintainability of your code while ensuring that the overall behavior of the code remains unaffected.</p>"},{"location":"edit-the-code/code-actions/#extract-to-code-actions","title":"Extract to code actions","text":"<p>The following refactoring actions are available for extracting expressions.</p>    Code action Description     <code>Extract to constant</code> Extract a constant expression to a constant.   <code>Extract to function</code> Extract an expression or a statement to a function.   <code>Extract to local variable</code> Extract an expression to a local variable.   <code>Extract type</code> Extract anonymous records to record types."},{"location":"edit-the-code/code-actions/#rewrite-code-actions","title":"Rewrite code actions","text":"<p>The following refactoring actions are available as rewrite actions.</p>    Code action Description     <code>Map with a query expression</code> When both the right-hand side (RHS) and left-hand side (LHS) types are array types, convert the RHS to a query expression. You can modify the query expression with additional clauses and mappings later."},{"location":"edit-the-code/code-actions/#source-actions","title":"Source actions","text":"<p>Source actions are used to generate common code structures and recurring elements.</p>"},{"location":"edit-the-code/code-actions/#generate-getters-and-setters","title":"Generate getters and setters","text":"<p>The following source actions are available for generating getters and setters.</p>    Code action Description     <code>Create a getter</code> Generate a getter for class-level variables.   <code>Create a setter</code> Generate a setter for class-level variables.   <code>Create getter and setter</code> Generate both getter and setter for class-level variables."},{"location":"edit-the-code/code-actions/#variables","title":"Variables","text":"<p>The following source actions are available for variables.</p>    Code action Description     <code>Type guard variable</code> Type guard a variable if the variable type is a union type."},{"location":"edit-the-code/code-actions/#imports_1","title":"Imports","text":"<p>The following source actions are available for imports.</p>    Code action Description     <code>Optimize imports</code> Optimize import statements to remove unused imports and arrange imports in alphabetical order."},{"location":"edit-the-code/code-actions/#documentation_1","title":"Documentation","text":"<p>The following source actions are available for documentations.</p>    Code action Description     <code>Document all</code> Document all the top-level constructs."},{"location":"edit-the-code/code-navigation/","title":"Code navigation","text":"<p>Ballerina VSCode extension provides rich support for code navigation. Different kinds of navigations supported are described in the following sections.</p>"},{"location":"edit-the-code/code-navigation/#go-to-definition","title":"Go to definition","text":"<p>Go to definition navigates you to the definition of a particular symbol. For example, when you invoke the <code>Go To Definition</code> option on a function call expression, it navigates you to the definition of the function.</p>"},{"location":"edit-the-code/code-navigation/#go-to-symbol","title":"Go to symbol","text":"<p>Go to symbol feature allows you to navigate symbols inside a file.</p>"},{"location":"edit-the-code/code-navigation/#find-all-references","title":"Find all references","text":"<p>Invoking the references (Right click on a symbol and select <code>Find All References</code>) on a symbol will prompt you with all the symbol references in the current project.</p>"},{"location":"edit-the-code/code-navigation/#peek","title":"Peek","text":"<p>This feature allows you to peek the definition or references of a given symbol.</p>"},{"location":"edit-the-code/code-navigation/#rename-symbols","title":"Rename symbols","text":"<p>This feature allows you to rename symbols by renaming all the references of the particular symbol.</p>"},{"location":"edit-the-code/diagnostics/","title":"Diagnostics","text":"<p>Diagnostics are the syntax and semantic errors that are identified in the source code. These may include a variety of errors and warnings. </p>"},{"location":"edit-the-code/diagnostics/#view-diagnostics","title":"View diagnostics","text":"<p>Diagnostics will show up in multiple places:</p> <ul> <li>In the Status Bar, there is a summary of all errors and warnings counts.</li> <li>The summary view and the PROBLEMS panel lists all of the current errors.</li> <li>Errors or warnings in a Ballerina file will be rendered inline with the text and in the overview ruler.</li> </ul>"},{"location":"edit-the-code/diagnostics/#perform-quick-fixes","title":"Perform quick fixes","text":"<p>For certain diagnostics, the possible quick fixes are suggested as code actions. You can easily select and apply the required quick fix from the list. </p> <p>For example, the <code>variable assignment is required</code> diagnostic suggests two quick fixes as follows:  - Create a new variable - Ignore the return value</p>"},{"location":"edit-the-code/intellisense/","title":"IntelliSense","text":""},{"location":"edit-the-code/intellisense/#code-completion-and-snippets","title":"Code completion and snippets","text":"<p>The extension provides suggestions on variables, keywords, and code snippets of language constructs (such as functions, type definitions, services, iterable constructs, etc.).</p>  <p>Following are some key features of the code completion support provided by the extension.</p>"},{"location":"edit-the-code/intellisense/#context-aware-completion-items","title":"Context-aware completion items","text":"<p>The completion items list is sorted based on the context of the current cursor position.</p>"},{"location":"edit-the-code/intellisense/#suggestions-for-service-templates","title":"Suggestions for service templates","text":"<p>Service templates corresponding to each available listener are provided in the list of completion items.</p>"},{"location":"edit-the-code/intellisense/#completion-support-for-iterables","title":"Completion support for iterables","text":"<p>The <code>foreach</code> and <code>foreach i</code> completion items are provided for iterable variables.</p>"},{"location":"edit-the-code/intellisense/#completion-support-for-type-guarding-a-variable","title":"Completion support for type guarding a variable","text":"<p>The <code>typeguard</code> completion item is provided for union-typed variables.</p>"},{"location":"edit-the-code/intellisense/#filling-required-fields-of-a-record","title":"Filling required fields of a record","text":"<p>The <code>Fill Record required fields</code> completion item is provided for filling the remaining fields of a <code>Record</code> typed value.</p>"},{"location":"edit-the-code/intellisense/#help-via-hover","title":"Help via hover","text":"<p>When hovering over a symbol name, you will be provided with quick information about the particular symbol. For example, when hovering over a function name, you will be prompted with the associated documentation.</p>"},{"location":"edit-the-code/intellisense/#signature-help","title":"Signature help","text":"<p>When typing a function/method call expression, the signature help will show information such as the function/method call\u2019s description and parameter information. Signature help will be triggered when typing the open parenthesis and comma.</p> <p>~~</p>"},{"location":"get-started/get-started/","title":"Get started","text":"<p>The sections below walk you through how to get started with the Ballerina VS Code extension by installing it and opening a Ballerina package in it.</p>"},{"location":"get-started/get-started/#install-the-ballerina-extension","title":"Install the Ballerina extension","text":"<p>Follow the steps below to set up the required prerequisites and install the Ballerina extension.</p> <ol> <li> <p>Install the Visual Studio Code editor version <code>1.60.0</code> or later.</p> </li> <li> <p>Download and install Ballerina.</p> </li> <li> <p>Install the Ballerina VS Code Extension. </p> </li> <li> <p>Open a Ballerina (<code>.bal</code>) file or a Ballerina package to activate the extension.</p> </li> </ol>"},{"location":"get-started/get-started/#open-ballerina-packages","title":"Open Ballerina packages","text":"<p>You can work on a single Ballerina package at a time or use multi-root workspaces of VS Code to work on several related Ballerina packages at the same time. </p>  <p>Info: When the extension is activated properly, you can see the <code>Ballerina SDK: &lt;version&gt;</code> in the status bar at the bottom left corner.</p>"},{"location":"get-started/get-started/#open-a-single-ballerina-package","title":"Open a single Ballerina package","text":"<p>Use one of the following options to open a Ballerina package:</p> <ul> <li>From the command line, execute <code>code &lt;path-to-package-dir&gt;</code>.</li> <li>From VS Code, click File &gt; Open Folder....</li> </ul>"},{"location":"get-started/get-started/#open-multiple-ballerina-packages","title":"Open multiple Ballerina packages","text":"<p>Once you have one Ballerina package opened in the VS Code editor, you can add other related packages to the same workspace.</p> <p>For more details, see the instructions on adding folders to multi-root workspaces in the VS Code editor.</p>"},{"location":"references/call-a-ballerina-library-function/","title":"Call a Ballerina library function using the Statement Editor","text":"<p>The Statement Editor allows you to easily navigate between Ballerina standard libraries and language libraries. The libraries tab in Statement Editor lists all the supported standard and language libraries.</p> <p>This guide helps you to understand how to call a Ballerina library function using the Statement Editor.</p> <p>Let's call the Ballerina <code>printError</code> function of the <code>log</code> module to log an error in the given sample code below.</p> <pre><code>public function main() returns error? {\n\n    error e = error(\"something went wrong!\");\n    // Add the function call to log and error\n}\n\n</code></pre> <p>Follow the steps below to build the log statement.</p> <ol> <li> <p>On the low-code diagram, click + within the main method. Then, click Function in the Add Constructs opened panel.</p>  <p>The Libraries tab will be selected by default listing all the supported Ballerina libraries.</p> </li> <li> <p>Search for log and select the <code>log</code> module. This will list all the supported functions, errors, records, types, etc. of the <code>log</code> module. Select the log:printError function.</p>  <p>When you select a function or a method call, the Parameters tab opens by default. This tab displays information about the selected function or method call including details about the parameters, descriptions, and return type descriptions. On this tab, you can easily add parameters to the expression by selecting the checkboxes of the relevant parameters.</p> </li> <li> <p>Double-click on the <code>&lt;add-mgs&gt;</code> template and type \"error log\".</p>  <p>Now, follow the steps below to pass the error - e to the <code>printError</code> function.</p> </li> <li> <p>Select the checkbox of the error from the parameter list. This will update the function with the correct syntax to add the error.</p> </li> <li> <p>Go to the Suggestions tab and select e, which is the previously defined error.</p>  </li> </ol> <p>You view the function call as follows without any diagnostics:</p> <pre><code>log:printError(\"error log\", 'error = e);\n</code></pre> <p>Now, you have constructed a valid function-call via the Statement Editor.</p> <ol> <li>Click Save to add the function call to the low-code diagram.</li> </ol>"},{"location":"references/how-to-paste-json-as-records/","title":"Convert JSON to records","text":"<p>The Ballerina language provides several options to convert JSON files into record definitions. </p>"},{"location":"references/how-to-paste-json-as-records/#option-one-from-record-editor","title":"Option One: From Record editor","text":"<p>Follow the steps below to convert a JSON to record from the Record editor.</p> <ol> <li> <p>Create a file with the data below in JSON format.</p>  <p>Info: The example below converts a <code>person</code> and a list of <code>courses</code> to a <code>Student</code> record. </p> <p><code>{     \"person\": {         \"id\": 1001,         \"firstName\": \"Vinnie\",         \"lastName\": \"Hickman\",         \"age\": 15     },     \"course\": [         {             \"id\": \"CS6002\",             \"name\": \"Computation Structures\",             \"credits\": 4         },         {             \"id\": \"CS6003\",             \"name\": \"Circuits and Electronics\",             \"credits\": 3         },         {             \"id\": \"CS6004\",             \"name\": \"Signals and Systems\",             \"credits\": 3         }     ] }</code></p>  </li> <li> <p>In the record editor, select Import A JSON.</p> </li> <li> <p>Provide a name for the record.</p> </li> <li> <p>Provide the sample JSON by either typing/pasting on the text area or by choosing the JSON file from the file selector.</p> </li> <li> <p>Select Make Separate Record Definitions to create separate Ballerina record definitions.</p>  </li> <li> <p>Use the preview of the created record to edit the created records further, and click Finish once editing is complete.</p>  </li> </ol>"},{"location":"references/how-to-paste-json-as-records/#option-two-from-command-palette","title":"Option Two: From Command palette","text":"<ol> <li> <p>Copy the JSON code block to the Clipboard (Ctrl + C).</p>  <p>Info: The example below converts a <code>person</code> and a list of <code>courses</code> to a <code>Student</code> record. </p> <p><code>{     \"person\": {         \"id\": 1001,         \"firstName\": \"Vinnie\",         \"lastName\": \"Hickman\",         \"age\": 15     },     \"course\": [         {             \"id\": \"CS6002\",             \"name\": \"Computation Structures\",             \"credits\": 4         },         {             \"id\": \"CS6003\",             \"name\": \"Circuits and Electronics\",             \"credits\": 3         },         {             \"id\": \"CS6004\",             \"name\": \"Signals and Systems\",             \"credits\": 3         }     ] }</code></p>  </li> <li> <p>Open the Command palette in the VS Code editor (Default: Ctrl + Shift + P).</p> </li> <li> <p>Search for Paste JSON as Record and select that option.</p>  </li> <li> <p>The command will generate separate record definitions accordingly.</p> </li> </ol>"},{"location":"references/how-to-use-record-editor/","title":"Record editor","text":"<p>Record is the type system introduced by the Ballerina language to hold data by a user. You can use records when you want to define data schemas. Once the records are created, you can easily manipulate data inside a program.</p> <p>Ballerina is a multi-paradigm language. You can define records in an imperative manner with Ballerina. On top of that, the Ballerina VS Code plugin comes with record editing capabilities, which will help you to edit records graphically.</p> <p>In the record editor, you have the ability to create a record from scratch or create a record by importing a JSON.</p>"},{"location":"references/how-to-use-record-editor/#set-up-the-prerequisites","title":"Set up the prerequisites","text":"<p>Follow the steps below to set up the prerequisites.</p> <ol> <li> <p>Install the latest versions of Ballerina and Ballerina Visual Studio Code plugin.</p> </li> <li> <p>Execute the command below to create a package (if you are not already working on one).</p> <p><code>bash bal new convert</code></p> </li> <li> <p>Open the created package in VS Code.</p> </li> </ol>"},{"location":"references/how-to-use-record-editor/#create-records-from-scratch","title":"Create records from scratch","text":"<p>Follow the steps below to create records from scratch.</p> <ol> <li> <p>Navigate to the record editor and select Create New.</p>  </li> <li> <p>Double-click the default record name to change it.</p>  </li> <li> <p>Click the plus button at the end of the field to add new fields to the record.</p>  <p>Info: Use the Expressions tab in the record editor to create nested records by selecting the particular record expression.</p>   </li> <li> <p>Select the semicolon(;) of a field and select the default value expression to add default values.</p>  </li> <li> <p>Use the isClosed option to switch between the open and closed records.</p>  </li> <li> <p>Once the record field configuration is done, click Save.</p>  </li> </ol>"},{"location":"references/how-to-use-statement-editor/","title":"Statement Editor","text":"<p>The Statement Editor allows you to construct Ballerina statements depending on the use case you want to build. It is an intuitive visual editor that is easy to use without an in-depth knowledge of the Ballerina Programming Language.</p> <p>It provides the following:</p> <ul> <li> <p>Context-based suggestions</p> </li> <li> <p>Ballerina libraries (standard libraries and language libraries)</p> </li> <li> <p>Pre-defined expression templates</p> </li> <li> <p>Documentation for functions and methods to configure parameters easily </p> </li> </ul>"},{"location":"references/how-to-use-statement-editor/#construct-statements","title":"Construct statements","text":"<p>This guide walks you through the steps to build the following statement using the editing capabilities of the Statement Editor. Later, you will explore different use cases.</p> <pre><code>final string userIdMsg = \"UserID : \" + id.toString();\n</code></pre> <p>Let's add the above statement to the main method of the given sample code below.</p> <pre><code>int id = 1234;\n\npublic function main() returns error? {\n   // Statement will be added here\n}\n</code></pre> <p>Follow the steps below to build the statement.</p> <ol> <li> <p>On the low-code diagram, click + within the main method. Then, click Variable in the Add Constructs pane that opens.</p>  <p>The Statement Editor opens displaying the syntax of a variable statement with the <code>&lt;add-expression&gt;</code> selected by default.v</p> </li> <li> <p>Click the var type descriptor on the statement and click string on the Suggestions tab.</p>  <p>Info: The Suggestions tab provides contextual suggestions based on the selected item. The Suggestions tab currently lists type suggestions because you selected the type descriptor.    </p>   <p>Here, you are specifying that the variable value is a string.</p> </li> <li> <p>To edit the variable name, double-click <code>variable</code> and type <code>userIdMsg</code> in the text box.</p>  <p>Info: Another way to make a part of a statement editable is to click on the required statement component and press  Enter/Return.</p>   <p>If you want to make changes to the content you have added to the statement, you can undo and redo your actions via the relevant icons on the top left of the toolbar. You can also remove content via the icon for deleting.</p> </li> <li> <p>Double click <code>&lt;add-expression&gt;</code> and type <code>\"UserID : \"</code> in the text box.</p>  <p>Info: To navigate from one item on the statement to another, you can also press Tab or Shift + Tab.</p>   <p>Here, you are entering static text as a part of the variable value.</p> </li> <li> <p>Follow the two approaches below to concatenate another expression to the String that you added right now.</p> <ol> <li>Click the Plus (+) operator in the toolbar</li> <li>Click the Expressions tab, and under the Arithmetic section, click the Es + Ex expression.</li> </ol> <p>Both of these methods will append another expression template to the existing expression. </p>  <p>Info: The Expressions tab lists all the pre-defined templates that you can use to define complex expressions.</p>   <p>In the <code>Es + Ex</code> expression template, <code>Es</code> refers to the existing expression you clicked and selected. <code>+ Ex</code> combines another expression with <code>Es</code>.</p> </li> <li> <p>Click the Suggestions tab and click on the id suggestion.</p>  <p>You view see some diagnostics generated for the suggestion you selected. Move on to the next step to resolve them. </p> </li> <li> <p>Follow the two approaches below to solve the diagnostics.</p> <ol> <li>Select thecode-actions provided by the Statement Editor provides based on your preference. To view the options, click on the bulb icon next to the diagnostic.</li> <li>Click the Suggestions tab and click toString() in the suggestions list to convert the value to a string format.</li> </ol> <p>The Suggestions tab will also provide other supported functions that can be called for the given expression.</p>  <p>Info: When you select a function or a method call, the Parameters tab opens by default. This tab displays information about the selected function or method call including details about parameters, descriptions, and return type descriptions. On this tab, you can easily add parameters to the expression by selecting the checkboxes of the relevant parameters.</p>    <p>Note: The Statement Editor clears all the diagnostics messages indicating that the statement is valid.</p>  <p>Now, follow the steps below to make the variable a final. </p> </li> <li> <p>Click on the globe icon in the toolbar and select the final keyword. </p>  <p>Info: The dropdown shows the possible modifiers for the statement that is currently being edited.</p>   <p>You view the variable statement as follows.</p> <p><code>final string userIdMsg = \"UserID : \" + id.toString();</code></p> <p>Now, you constructed a valid statement via the Statement Editor.</p> </li> <li> <p>Click Save to add the variable statement to the low-code diagram.</p> </li> </ol>"},{"location":"references/how-to-use-statement-editor/#featured-use-cases","title":"Featured use cases","text":"<p>To explore more on the Statement Editor functionalities, see the use cases below.</p> <ul> <li>Call a Ballerina library function</li> <li>Create a record</li> <li>Define a configurable while developing another construct</li> </ul>"},{"location":"release-notes/version-3.3.0/","title":"Ballerina VS Code extension (version 3.3.0)","text":"<p>We are happy to announce the Ballerina VS Code extension 3.3.0 release, which has some exciting new features. Following are the highlights of this release.</p> <ul> <li>Visual Data Mapper - Helps you write and visualize data transformations easily.</li> <li>GraphQL Tryit - Facilitates trying out the GraphQL services with the integrated client.</li> <li>Record Editor - Provides a better editing experience with suggestions. </li> <li>Project Design View - Facilitates visualizing service interactions in your project.</li> </ul> <p>If you are new to Ballerina, you can download the installers to install it. You can install the Ballerina VS Code extension from the VS Code marketplace.</p>"},{"location":"release-notes/version-3.3.0/#visual-data-mapper","title":"Visual Data Mapper","text":"<ul> <li>A powerful graphical editor, which allows you to easily create complex data transformations in a few minutes.</li> <li>Provides descriptive diagnostics, error highlighting, and code actions, which leverage the editing experience.</li> <li>An integrated expression editor to add custom values with the support of lang server suggestions, library browsing, etc.</li> <li>Currently, supports JSON to JSON transformations and will support more in the future.</li> </ul>"},{"location":"release-notes/version-3.3.0/#graphql-tryit","title":"GraphQL Tryit","text":"<ul> <li>You can try out the GraphQL services using the <code>Tryit</code> CodeLens.</li> <li>You can send and test any request with headers to your GraphQL service in VS Code itself without using any third-party tools.</li> <li>The GraphQL explorer will help you to explore the available endpoints and generate the query for you.</li> </ul>"},{"location":"release-notes/version-3.3.0/#record-editor","title":"Record Editor","text":"<ul> <li>The expression editor is now combined with the record editor, which will give a better editing experience with suggestions and library support.</li> <li>Now, you can create records by importing a JSON file. All you need to do is select a sample JSON file under the Import a JSON` section in the record creation.</li> <li>Record creation using JSON samples now supports separate record creation for complex JSON records. </li> </ul>"},{"location":"release-notes/version-3.3.0/#project-design-view-experimental","title":"Project Design View (experimental)","text":"<ul> <li>This release includes an experimental feature that allows you to visualize service interactions in your project.</li> <li>It also comes with a view to see record-type compositions and relationships.</li> <li>Use the <code>Ballerina: Project Design</code> command to open the design view.</li> </ul>"},{"location":"visual-programming/data-mapper/","title":"Data Mapper","text":"<p>Visual Data Mapper is a tool, which allows you to visually translate data from one format to another (such as from one JSON format to another). It comes with an intuitive user interface and prevents the need of being aware of the programming logic underneath.</p> <p>When you map data via the user interface, the Data Mapper generates the required Ballerina source code. Since the Ballerina source code is the single source of truth for the Visual Data Mapper, it also lets you open and edit existing data mappings made via the source code without changing the user experience.</p>"},{"location":"visual-programming/data-mapper/#set-up-the-prerequisites","title":"Set up the prerequisites","text":"<ol> <li>Install the latest Ballerina version and the Ballerina Visual Studio Code extension.</li> <li> <p>Execute the command below to create a package (if you are not already working on one).</p> <p><code>bash bal new convert</code></p> </li> <li> <p>Open the created package in VS Code.</p> </li> </ol>"},{"location":"visual-programming/data-mapper/#sample-use-case","title":"Sample use case","text":"<p>The below is a simple use case in which you will input data of people and courses in a specific structure and convert and transform those to a different format.</p> <p>Create three files with the sample data below in JSON format.</p> <p>Input 1: Person</p> <pre><code>{\n    \"id\": \"1001\",\n    \"firstName\": \"Vinnie\",\n    \"lastName\": \"Hickman\",\n    \"age\": 15,\n    \"country\": \"UK\"\n}\n</code></pre> <p>Input 2: Course</p> <pre><code>{\n    \"id\": \"CS6002\",\n    \"name\": \"Computation Structures\",\n    \"credits\": 4\n}\n</code></pre> <p>Output</p> <pre><code>{\n    \"id\": \"1001F\",\n    \"fullName\": \"Vinnie Hickman\",\n    \"age\": \"15\",\n    \"courses\": [\n        {\"title\": \"CS6002 - Computation Structures\", \"credits\": 4},\n        {\"title\": \"CS6003 - Circuits and Electronics\", \"credits\": 3},\n        {\"title\": \"CS6004 - Signals and Systems\", \"credits\": 3}\n    ],\n    \"totalCredits\": 10,\n    \"visaType\": \"D tier-4\"\n}\n</code></pre>"},{"location":"visual-programming/data-mapper/#open-the-data-mapper","title":"Open the Data Mapper","text":"<p>There are two different ways of opening the Data Mapper.</p> <ol> <li> <p>Open with the <code>Design</code> code lens.</p> <p>Add the code below to the <code>main.bal</code> file of the package to define an empty expression bodied function.</p>  <p>Info: The preferred way to model the transformation logic in Ballerina is via expression-bodied functions. The expression-bodied function below will simply return nil. The function body of it is an expression, which will return a nil value.</p>  <p><code>ballerina function name() =&gt; ();</code> Once you add the above function, the VS Code extension will display a code lens called <code>Design</code> on top of the function. Click the Design code lens to go to the Data Mapper view.</p>  </li> <li> <p>Open with the Diagram View.</p> <p>Open the file in the Diagram View and click the <code>+</code> icon on the page. Then, click Data Mapper in the Add Constructs pane.</p>  </li> </ol>"},{"location":"visual-programming/data-mapper/#provide-inputs-and-output","title":"Provide inputs and output","text":"<p>Once the Data mapper is opened, it will prompt you to provide inputs and output of the transformation function. Inputs and the output can be any data type in Ballerina. This example converts JSON and array of JSON to JSON, and thereby, you can use Ballerina record types as inputs and output.</p> <p>In the Data Mapper form, you have several options to provide the input and output records. If the records are already defined in your package, you can select one of those. If you are starting from scratch, you can either create the record from the Record Editor view or import a JSON to create a matching record.</p> <p>This example imports JSON files and creates the records as shown below.</p>  <p>Once you define the input and the output types, click Save to open the mapping view. </p>"},{"location":"visual-programming/data-mapper/#define-the-mappings","title":"Define the mappings","text":"<p>Let's see how to map the input fields with the fields in the JSON output.</p>"},{"location":"visual-programming/data-mapper/#basic-mapping","title":"Basic mapping","text":"<p>Map the <code>person id</code> to the <code>student id</code> as shown below.</p>  <p>Info: The mapping view will have the Inputs on the left hand side of the UI and the Output on the right. To map the fields, click on the input field port and then, click the output field port. If the input and output fields are compatible and can be mapped directly, you will see a solid line connecting them.</p>"},{"location":"visual-programming/data-mapper/#diagnose-and-fix-mapping-errors","title":"Diagnose and fix mapping errors","text":"<p>Use the <code>toBalString</code> lang lib function to convert the int to string as shown below.</p>  <p>Info: When you map the input fields to output fields, some of them might not be compatible due to type mismatch. In this example, if you map the <code>person age</code> to <code>student</code> age, it will result in an type mismatch error since the <code>input age</code> type is an integer and the <code>output age</code> type is a string. In this case, the Data Mapper will connect the two fields with a red line and show an alert sign. You can see the error by hovering over the alert sign. In this case, it will show the <code>incompatible types: expected 'string', found 'int'</code> error. To fix the error, hover over the alert sign and click Fix by editing expression. Then, the Data Mapper will pop out the expression editor for the specific expression. Now, you can modify the expression to return a string.</p>   <p>Once you fix the error, the connection appears in blue to indicate that there are no errors.</p>"},{"location":"visual-programming/data-mapper/#aggregate-input-and-output-fields","title":"Aggregate input and output fields","text":"<p>You can derive one output parameter by combining two or more input parameters. In this example, the value for the <code>fullName</code> output parameter is a combination of the values of the <code>firstName</code> and <code>lastName</code> input parameters. You can map them as shown below:</p>  <p>Info: To aggregate fields, you can map two or more fields to the same output field. The Data Mapper will automatically combine the two fields and assign them to the output field. By default, the fields will be combined with a plus operator. If you want to use a different operator or method to combine two fields, you can click on the Code button and customize the expression with the expression editor.</p>"},{"location":"visual-programming/data-mapper/#map-the-arrays","title":"Map the arrays","text":"<p>To convert from one array type to another, you can simply map the input array to the output array. If the arrays are compatible, they will be connected with a blue line. If they are incompatible, the connecting line will appear in red.</p>  <p>Info: You can use Ballerina query support to convert one array type to another. To use a query in a Data Mapper, you can select the array by clicking on it. Then, it will provide you with several buttons. Click the code action button (bulb sign) and select Convert to query. Then, the Data Mapper will convert the mapping to a query. Then, move into the query and do the mapping between the array types.</p>"},{"location":"visual-programming/data-mapper/#process-the-data-further","title":"Process the data further","text":"<p>You can further process the data within the query expression. Currently, the Data Mapper supports the following intermediate clauses. - <code>Where</code> clause: filter data based on a given condition - <code>Let</code> clause: define local variables within the query expression - <code>Limit</code> clause: limit the number of elements returned from the query expression - <code>Order by</code> clause: sort data within the query expression in <code>ascending</code> or <code>descending</code> order - <code>Join</code> clause: performs an inner join - <code>Outer join</code> clause: performs left outer join</p>  <p>Once array type mapping is completed, select the transform function name in the top breadcrumb bar to navigate to the root view of mapping.</p>"},{"location":"visual-programming/data-mapper/#add-local-variables","title":"Add local variables","text":"<p>You can define local variables within the transformation function and re-use them in multiple places to avoid duplications.</p>  <p>Info: If there are no existing local variables, you can open up the local variable pane by clicking the Add Local Variable button. Otherwise, the defined local variables are listed down under local variables in the RHS of the UI. You will be able to access the local variable pane by clicking the Edit button there.</p>"},{"location":"visual-programming/data-mapper/#manipulate-fields-without-drawing-connections","title":"Manipulate fields without drawing connections","text":"<p>Click on the triple dots button at the end of the field to see the actions that can be performed for the selected field.</p>"},{"location":"visual-programming/data-mapper/#initialize-arrays-add-and-delete-elements","title":"Initialize arrays, add, and delete elements","text":"<p>Info: The actions are provided based on the type of the selected field. If you click on the triple dots button of an array-typed field, you will see the Initialize Array option.</p>  <p>Once the array is initialized, you can add array elements by clicking the + Add Element button. Furthermore, clicking the triple dots button on any array element will provide the option to delete that element.</p>"},{"location":"visual-programming/data-mapper/#addedit-constant-valuesexpressions","title":"Add/Edit constant values/expressions","text":"<p>Info: If a particular field is empty and accepting a constant/expression, you will see the Add value action after clicking the triple dots button. This will open up the expression editor and you will be able to provide a constant value or construct any complex expression in it.</p>  <p>Let's add a hard-coded visa type for foreign students.</p>   <p>Info: If a particular field is having a value, you will see the Edit value action once you click the triple dots button.</p>  <p>Let's add an 'F' suffix to the <code>student id</code> of each foreign student.</p>  <p>Finally, lets fill the <code>totalCredits</code> field by getting the summation of the credits in each CS course. You can use the <code>reduce()</code> array function for this by passing the combining function below to get the sum.</p> <pre><code>var totalCredits = function(int total, record {string id; string name; int credits;} course) returns int =&gt; total + (course.id.startsWith(\"CS\") ? course.credits : 0);\n</code></pre>  <p>Now, you have successfully configured the transformation function using the Data Mapper.</p> <p>The following is the source associated with this guide along with a main function to invoke the transformation function with some sample data.</p> <pre><code>import ballerina/io;\n\ntype Person record {\n    string id;\n    string firstName;\n    string lastName;\n    int age;\n    string country;\n};\n\ntype Course record {\n    string id;\n    string name;\n    int credits;\n};\n\ntype Student record {\n    string id;\n    string fullName;\n    string age;\n    record {\n        string title;\n        int credits;\n    }[] courses;\n    int totalCredits;\n    string visaType;\n};\n\nconst D_TIER_4_VISA = \"D tier-4\";\n\nvar totalCredits = function(int total, record {string id; string name; int credits;} course) returns int =&gt; total + (course.id.startsWith(\"CS\") ? course.credits : 0);\n\nfunction transform(Person person, Course[] courses) returns Student =&gt; let var isForeign = person.country != \"LK\" in {\n        id: person.id + (isForeign ? \"F\" : \"\"),\n        age: person.age.toString(),\n        fullName: person.firstName + \" \" + person.lastName,\n        courses: from var coursesItem in courses\n            where coursesItem.id.startsWith(\"CS\")\n            select {\n                title: coursesItem.id + \" - \" + coursesItem.name,\n                credits: coursesItem.credits\n            },\n        visaType: isForeign ? D_TIER_4_VISA : \"n/a\",\n        totalCredits: courses.reduce(totalCredits, 0)\n    };\n\npublic function main() {\n    Person person = {\n        id: \"1001\",\n        firstName: \"Vinnie\",\n        lastName: \"Hickman\",\n        age: 15,\n        country: \"UK\"\n    };\n\n    Course[] courses = [\n            {\n                id: \"CS6002\",\n                name: \"Computation Structures\",\n                credits: 4\n            },\n            {\n                id: \"CS6003\",\n                name: \"Circuits and Electronics\",\n                credits: 3\n            },\n            {\n                id: \"CM1001\",\n                name: \"Computational Statistics\",\n                credits: 4\n            },\n            {\n                id: \"CS6004\",\n                name: \"Signals and Systems\",\n                credits: 3\n            }\n        ];\n\n    Student student = transform(person, courses);\n    io:println(student);\n}\n\n</code></pre>"},{"location":"visual-programming/project-design-view/","title":"Project Design view","text":"<p>Software applications have evolved into a composition of multiple interrelated components to be able to handle increasing complexities. When the number and/or depth of such components grow, it is convenient to have a high-level picture of the system components and their interactions. </p> <p>The Ballerina Project Design view is enabled in the VS Code extension to provide such a high-level picture of Ballerina projects purely based on the source code. In addition to the component interactions, the Project Design view is also capable of visualizing the Ballerina record types in the project workspace and their associations.</p>"},{"location":"visual-programming/project-design-view/#related-concepts","title":"Related concepts","text":"<p>When you create your Ballerina project, be mindful of the following concepts, as they will affect the Project Design view.</p>"},{"location":"visual-programming/project-design-view/#ballerina-project","title":"Ballerina project","text":"<p>A Ballerina project is a collection of one or more Ballerina packages.</p>"},{"location":"visual-programming/project-design-view/#project-workspace","title":"Project workspace","text":"<p>A Ballerina project is contained in a VS Code workspace. To use the Design Diagram view, you need to have all the Ballerina packages added to the VS Code editor as a workspace.</p>  <p>Tip: You can save your VS Code workspace as a file and use this file to access the workspace thereafter.</p>"},{"location":"visual-programming/project-design-view/#service-identifiers","title":"Service identifiers","text":"<p>Since multiple services can have the same path, this tool depends on an additional annotation to uniquely identify the services within the project. The current approach to do so is via the <code>display</code> annotation, which is a general-purpose annotation that can be used in Ballerina code.</p> <p>By providing a unique value to the <code>id</code> field of the display annotation, you can assign an identifier to each service. For reference, the <code>CurrencyService</code> in the following code snippet has been annotated with an ID of the <code>currency</code> value and this identifier will be used to differentiate the service throughout the project.</p> <pre><code>@display {\n   label: \"CurrencyService\",\n   id: \"currency\"\n}\n@grpc:ServiceDescriptor {descriptor: ROOT_DESCRIPTOR, descMap: getDescriptorMapDemo()}\nservice \"CurrencyService\" on ep {final map&lt;decimal&gt; &amp; readonly currencyMap;\n   function init() returns error? {\n      json currencyJson = check io:fileReadJson(currencyJsonPath);\n      self.currencyMap = check parseCurrencyJson(currencyJson).cloneReadOnly();\n   }\n\n   remote function GetSupportedCurrencies(Empty value) returns GetSupportedCurrenciesResponse|error {\n      return {currency_codes: self.currencyMap.keys()};\n   }\n}\n</code></pre> <p>If other services interact with this service, this same identifier has to be provided upon creating the client endpoint. By doing so, it makes it possible to uniquely identify and link the service interactions between one another. </p> <p>For example, the code snippet below invokes the <code>Currency Service</code> from a different component.</p> <pre><code>isolated function getSupportedCurrencies() returns string[]|error {\n   @display {\n      label: \"CurrencyService\",\n   id: \"currency\"\n   }\n   final CurrencyServiceClient currencyClient = check new (\"http://localhost:9093\");\n   GetSupportedCurrenciesResponse|grpc:Error supportedCurrencies = currencyClient-&gt;GetSupportedCurrencies({});\n   if supportedCurrencies is grpc:Error {\n      log:printError(\"failed to call getSupportedCurrencies from currency service\");\n      return supportedCurrencies;\n   }\n   return supportedCurrencies.currency_codes;\n}\n</code></pre>"},{"location":"visual-programming/project-design-view/#service-resources","title":"Service resources","text":"<p>The resource invocations between services need to be done using client access actions.</p>"},{"location":"visual-programming/project-design-view/#open-the-project-design-view","title":"Open the Project Design view","text":"<p>Example project</p> <p>Let's use the Google Cloud Platform demo to demonstrate the different capabilities of the Design Diagram. This sample has 10 services (9 GRPC and one HTTP) in 10 separate Ballerina packages. The <code>ui</code> folder is not a Ballerina package, hence would not make an impact. </p>  <ol> <li> <p>To set up a Ballerina project as a VS Code workspace, add all the Ballerina packages to the workspace using one of the following methods:</p> <ul> <li> <p>Use the VS Code workspace file from an already created workspace to import its packages to a new workspace.</p>  <p>Info: The workspace file of the Google Cloud Platform demo project is available in the repository.</p>  </li> <li> <p>Add each Ballerina package to the workspace using the Add folder to workspace option in the VS Code editor.</p> </li> </ul> <p>When the workspace is set up, you will see the following folder structure in the Explorer:</p>  <p>Note: The workspace name may be different if you set up the workspace from scratch.</p>   </li> <li> <p>Once the packages are added to the workspace, activate the Ballerina Design Diagram generator via the <code>Ballerina: Project Design</code> command in the command palette, as shown below.</p>  </li> </ol>"},{"location":"visual-programming/project-design-view/#explore-the-project-design-view","title":"Explore the Project Design view","text":"<p>Let's explore the features of the Design Diagram using the Google Cloud Platform Ballerina project that you set up in the previous topic.</p> <p>When you open the Design Diagram as explained in the previous topic, you will see three types of design diagrams to choose from as shown below. </p>"},{"location":"visual-programming/project-design-view/#service-diagram-level-1","title":"Service Diagram: Level 1","text":"<p>This diagram displays all the services available within the workspace with links representing any interactions between them. The basic Service Diagram (level 1) generated for the 10 Ballerina packages in the Google Cloud Platform demo project is shown below.</p>   <p>Info: The link between the <code>Checkout</code> service and the <code>Email</code> service indicates that a component of the <code>Checkout</code> service invokes the <code>Email</code> service. In addition to this, the <code>Email</code> service also invokes an <code>external</code> service via a connector.</p>"},{"location":"visual-programming/project-design-view/#service-diagram-level-2","title":"Service Diagram: Level 2","text":"<p>The detailed Service Diagram (Level 2) dives deeper into the compositions of the services and the interactions between them. Shown below is the detailed representation of the demo project, which depicts the individual resource/remote functions of the services and their invocations.</p>  <p>The data types of the request and response bodies of the interactions can be viewed by hovering over a particular invocation.</p>"},{"location":"visual-programming/project-design-view/#type-diagram","title":"Type Diagram","text":"<p>The Type Diagram provides a comprehensive view of all the Ballerina record types defined in the project workspace and their associations.</p>   <p>Info: The multiplicities of the associations are represented on either side of the connector, while the type inclusions are differentiated using a directed link (represents inheritance).</p>"},{"location":"visual-programming/project-design-view/#composition-diagram","title":"Composition Diagram","text":"<p>You can also view the composition of an individual record type. These composition diagrams can be accessed by:</p> <ul> <li> <p>Clicking the record types that are included in the request/response bodies of the service invocations shown in the detailed service diagram.</p> </li> <li> <p>Clicking the head of the records displayed in the Type Diagram.</p> </li> </ul> <p>The following is the composition diagram generated for the <code>ContextSearchProductsResponse</code> record type seen in the Type Diagram above.</p>"},{"location":"visual-programming/project-design-view/#other-capabilities","title":"Other capabilities","text":"<p>In addition to the above, the Ballerina Project Design tool includes the following features.</p> <ul> <li>Filter the services and types based on the packages</li> <li>Rearrange the diagram as appropriate</li> <li>Export the diagrams in JPEG format</li> </ul>"},{"location":"visual-programming/sequence-diagram-view/","title":"Sequence Diagram view","text":"<p>When you use the Ballerina VS Code extension, you can view your code in graphical mode and develop your program logic through it. This allows you to look at your program logic holistically and comprehend the program at a glance. </p> <p>This visual representation has its roots in sequence diagrams and can capture how the logic of your program flows, how the concurrent execution flow works, which remote endpoints are involved, and how those endpoints interact with the different objects in the program.</p>"},{"location":"visual-programming/sequence-diagram-view/#switch-to-graphical-mode","title":"Switch to graphical mode","text":"<p>There are two methods for switching to the graphical mode using the VS Code extension.</p> <ul> <li> <p>Execute the <code>Ballerina: Show Diagram</code> command from the command palette.</p>  </li> <li> <p>Click <code>Show Diagram</code> in the editor group.</p>  </li> </ul> <p>Shown below is the code editor and graphical editor in view.</p>"},{"location":"visual-programming/sequence-diagram-view/#graphical-representation-of-code","title":"Graphical representation of code","text":"<p>Ballerina code can be represented graphically in the following ways.</p>"},{"location":"visual-programming/sequence-diagram-view/#functions","title":"Functions","text":"<p>Graphical representations of functions are based on sequence diagrams. Each function has a lifeline with a start and end, and this lifeline represents the flow of the function logic. </p> <p>Source code</p> <pre><code>import ballerina/io;\nimport ballerina/random;\n\npublic function main() {\n    io:println(\"Hello, World!\");\n\n    if random:createIntInRange(1, 100) == 22 {\n        io:println(\"the number is 22\");\n    } else {\n        io:println(\"the number is not 22\");\n    }\n\n    io:println(\"Program exit\");\n}\n</code></pre> <p>Graphical view</p>"},{"location":"visual-programming/sequence-diagram-view/#concurrent-execution","title":"Concurrent execution","text":"<p>Concurrent executions are supported in Ballerina through workers. Each worker has a lifeline that runs parallel to  the lifeline of the main function body. The diagram also captures asynchronous messaging between workers.</p> <p>The following example shows how asynchronous messaging is represented in the diagram.</p> <p>Source code</p> <pre><code>public function FunctionWithWorker() {\n    worker A {\n        int num = 10;\n\n        // Sends the `10` integer value to the `B` worker asynchronously.\n        num -&gt; B;\n\n        // Receives the `Hello` string from the `B` worker.\n        string msg = &lt;- B;\n        io:println(string `Received string \"${msg}\" from worker B`);\n    }\n\n    worker B {\n        int num;\n\n        // Receives the `10` integer value from the `A` worker.\n        num = &lt;- A;\n        io:println(string `Received integer \"${num}\" from worker A`);\n\n        // Sends the `Hello` string to the `A` worker asynchronously.\n        string msg = \"Hello\";\n        msg -&gt; A;\n    }\n\n    wait A;\n    io:println(\"Woker A execution finished\");\n}\n</code></pre> <p>Graphical view</p>"},{"location":"visual-programming/sequence-diagram-view/#remote-endpoints-and-clients","title":"Remote endpoints and clients","text":"<p>Ballerina specifies interactions with remote endpoints through its syntax. These interactions are presented graphically in the diagram view by giving each endpoint a lifeline. This endpoint lifeline represents the messages that the endpoint can receive.</p> <p>The following code shows an HTTP client that is used for the <code>GET</code> and <code>POST</code> requests sent to a remote endpoint.</p> <p>Source code</p> <pre><code>function execute() returns error? {\n    http:Client lookupService = check new (lookupUrl);\n    http:Client reportService = check new (reportUrl);\n\n    json result = check lookupService-&gt;get(\"/query\");\n    http:Response response = check reportService-&gt;post(\"/report\", result);\n}\n</code></pre> <p>Graphical view</p>"},{"location":"visual-programming/sequence-diagram-view/#develop-programs-in-graphical-mode","title":"Develop programs in graphical mode","text":"<p>You can interact with the diagram using the <code>plus</code> icons placed in the lifeline. You can add a statement at the  function execution flow by clicking Add.</p>"},{"location":"visual-programming/sequence-diagram-view/#related-topics","title":"Related topics","text":"<p>See the following topics to explore graphical coding further.</p> <ul> <li>Data Mapper</li> <li>Project Design view</li> </ul>"}]}